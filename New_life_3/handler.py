from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State

from New_life_3.parsers.parser_cinema import all_cinema
from weather_tg_bot import *  #!!!
from New_life_3.weatear import ru
from New_life_3.config import *
from buttons import *
import h3
import re
from geolocation import *
# from parsers.parser_pizza import list_pizza
from New_life_3.parsers.parser_kinogo import all_kinogo
from New_life_3.parsers.parser_litres import all_books
from New_life_3.parsers.cook_parser import all_cooks
from New_life_3.parsers.parser_restaurant_pizza import all_pizza
from New_life_3.parsers.parser_coffee import all_coffee
from sqlite import Database
from geopy.geocoders import Nominatim
import requests
import random
import aiofiles

db = Database('database.db')
number = random.randint(1, 20)

count_of_attempts = 1
metrix_1 = []
me = []
me_cinema = []
koi = []
users = {}


@dp.message_handler(commands='start')
async def start_message(message: types.Message):
    if message.chat.type == 'private':
        if not db.create_profile(message.from_user.id):
            db.edit_profile(message.from_user.id)
        await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å–∫–∞–∂–µ—Ç –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å, –≤ —Å–≤—è–∑–∏ —Å –ø–æ–≥–æ–¥–æ–π',
                             reply_markup=user_kb)
        await message.answer('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?üå§')


@dp.message_handler(commands='sendall')
async def send_all(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == ADMIN_ID:
            text = message.text[9:]
            users_id = db.get_users()
            for row in users_id:
                try:
                    await bot.send_message(row[0], text)

                except:
                    db.set_active(row[0], 0)

            await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")


@dp.message_handler(Text(equals=cities, ignore_case=True))
async def today(message: types.Message):
    p = message.text
    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={OPEN_WEATHER_TOKEN}&units=metric&lang={ru}"
        )
        data = r.json()

        # if message.chat.type == 'private':
        #     db.city_user(message.text)

        # if not db.create_profile(p):
        #     db.edit_profile(None, p)

        # if str(message.from_user.id) not in users.keys():
        #     users[str(message.from_user.id)] = message.from_user.full_name
        #
        #     async with aiofiles.open('users_datas.txt', 'w+') as users_file:
        #         for ID, username in users.items():
        #             await users_file.write(f'ID: {ID} | Username: {username}, CITY: {p}')
                    # db.city_user(message.text)

        city = data["name"]
        cur_weather = data["main"]["temp"]
        weather_description = data["weather"][0]["description"]
        wind = data["wind"]["speed"]

        await message.answer(f'–í –≥–æ—Ä–æ–¥–µ: {city} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {cur_weather} C \n–û–∂–∏–¥–∞–µ—Ç—Å—è: {weather_description}\n'
                             f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/c', reply_markup=house_or_street)

        if cur_weather < 5 and cur_weather > -4:
            await message.answer('c–µ–≥–æ–¥–Ω—è –Ω–∞ —É–ª–∏—Ü–µ –Ω–µ–º–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ —Å–ª—è–∫–æ—Ç—å –∏ –≥–æ–ª–æ–ª—ë–¥,'
                                 '–º–æ–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞ –∏–ª–∏ –ø–æ–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É')

        elif cur_weather < -4 and cur_weather > -8:
            await message.answer('—Å–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ —Ö–æ–ª–æ–¥–Ω–æ, –æ–¥–µ–Ω—å—Å—è –ø–æ—Ç–µ–ø–ª–µ–µ, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –µ—â—ë –ø–æ–µ—Å—Ç—å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º')

        elif cur_weather < -9 and cur_weather > -16:
            await message.answer('—Å–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –¥–æ–≤–æ–ª—å–Ω–æ —Ö–æ–ª–æ–¥–Ω–æ, –ø–æ—Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞,'
                                 ' –Ω–æ –µ—Å–ª–∏ —Ç–µ–±–µ –Ω–µ —Å—Ç—Ä–∞—à–µ–Ω —Ö–æ–ª–æ–¥, –º–æ–≥—É –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∫—É–¥–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å  ')

        elif cur_weather < -16:
            await message.answer('c–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ, –æ—Å—Ç–∞–Ω—å—Å—è –ª—É—á—à–µ –¥–æ–º–∞')

    except:
        await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")


@dp.message_handler(Text(equals='–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∞—Ç—å –¥–æ–º–∞ ?üè†', ignore_case=True))
async def leisure(message: types.Message):
    await message.answer('–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–ø–æ—á–∏—Ç–∞—Ç—å —Ñ–∏–ª—å–º/–∫–Ω–∏–≥—É, –Ω–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º, —è –±—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª –∑–∞–≤–∞—Ä–∏—Ç—å —á–∞—è/–∫–æ—Ñ–µ.\n'
                         '–º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –∫–∞–∫ –ª–µ–≥–∫–æ –∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∫—É—Å–Ω—ã–π –¥–µ—Å–µ—Ä—Ç,'
                         '—Ç–∞–∫ –∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –ø–∏—Ü—Ü—ã', reply_markup=help_assistant_house)


@dp.message_handler(Text(equals='–ö–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ ?üö∂‚Äç‚ôÇüö∂‚Äç‚ôÄ', ignore_case=True))
async def street(message: types.Message):
    await message.answer('–ú–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –≤ –∫–∏–Ω–æ/—Ç–µ–∞—Ç—Ä, –º–æ–∂–Ω–æ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∫–∞—Ç–∞—è—Å—å –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö.'
                         '–í —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ/—á–∞—è. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º—É –ø–∞—Ä–∫—É,'
                         '–∞ –≤ –∫–æ–Ω—Ü–µ –≤–µ—á–µ—Ä–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –ø–æ–∫—É—à–∞—Ç—å –ø–∏—Ü—Ü—ã', reply_markup=help_assistant_street)


@dp.message_handler(Text(equals='–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µüå§', ignore_case=True))
async def back(message: types.Message):
    await message.answer('–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ–∂–∏–¥–∞–µ—Ç—Å—è...', reply_markup=user_kb)


@dp.message_handler(Text(equals='–°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ÉüîÆ', ignore_case=True))
async def game(message: types.Message):
    global count_of_attempts, number

    if count_of_attempts == 1:
        await message.answer(f'–û—Ç–≥–∞–¥–∞–π —á–∏—Å–ª–æ \n—è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20, –ø–æ–ø—Ä–æ–±—É–π –µ–≥–æ —É–≥–∞–¥–∞—Ç—åüòâ', reply_markup=menu)
    else:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æüßê')


@dp.message_handler(Text(equals='–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìã', ignore_case=True))
async def back(message: types.Message):
    await message.answer('—Å–µ–∫—É–Ω–¥—É‚è±', reply_markup=house_or_street)


@dp.message_handler(Text(equals='–ö–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ ?üö∂‚Äç‚ôÇüö∂‚Äç‚ôÄ', ignore_case=True))
async def back_street(message: types.Message):
    await message.answer('–°–µ–π—á–∞—Å –ø–æ–¥—Å–∫–∞–∂—É', reply_markup=help_assistant_street)


@dp.message_handler(Text(equals='–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∞—Ç—å –¥–æ–º–∞ ?üè†', ignore_case=True))
async def back_street(message: types.Message):
    await message.answer('–°–µ–π—á–∞—Å –ø–æ–¥—Å–∫–∞–∂—É', reply_markup=help_assistant_house)


# @dp.message_handler(Text(equals='–ß—Ç–æ –∑–∞ –∞–∫—Ü–∏—è –Ω–∞ –ø–∏—Ü—Ü—É?üçï', ignore_case=True))
# async def pizza(message: types.Message):
#     await message.answer(f'{list_pizza}')


@dp.message_handler(Text(equals='–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?üé¨', ignore_case=True))
async def kinogo(message: types.Message):
    for i in all_kinogo[1:4]:
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]} \nC—Å—ã–ª–∫–∞: {i[-1]}')
    # g = 1
    # while True:
    #     if g < 10:
    #         for i in kinogo_decription, r in kinogo_urls:
    #             await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i} \nCc—ã–ª–∫–∞: {r}\n')
    #             g += 1
    #             print(g)
    #             break
    #     else:
    #         g += 1
    #         print(g)
    #         break

            # if i[1] == i[8] and r[1] == r[8]:
            #     break
            # else:
            #     await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i} \nCc—ã–ª–∫–∞: {r}\n')


@dp.message_handler(Text(equals='–ö–∞–∫—É—é –∫–Ω–∏–≥—É –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å?üìö', ignore_case=True))
async def book(message: types.Message):
    for i in all_books[1:4]:
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ:{i[0]} \nCc—ã–ª–∫–∞: {i[-1]}\n')


@dp.message_handler(Text(equals='–ö–∞–∫–æ–π –¥–µ—Å–µ—Ä—Ç –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?üßÅ', ignore_case=True))
async def cook(message: types.Message):
    for i in all_cooks[1:4]:
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]} \nCc—ã–ª–∫–∞: {i[-1]}\n')


@dp.message_handler(Text(equals='–ù–∞ –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å ?üé¨', ignore_case=True))
async def cinema(message: types.Message):
    for i in all_cinema[1:4]:
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]} \nCc—ã–ª–∫–∞: {i[1]} \n–°—Ç–æ–∏–º–æ—Å—Ç—å: {i[2]} \n–î–∞—Ç–∞: {i[-1]}', reply_markup=types.ReplyKeyboardRemove())
    await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è‚ùó \n–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–µ–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ–∑–ª–µ —Ç–µ–±—è'
                         f' \n–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ',
                         reply_markup=me_location)


@dp.message_handler(content_types=["location"])
async def location_cinema(message: types.Message):
    if message.location is not None:
        geolocation_me_cinema = (message.location.latitude, message.location.longitude)
        me_cinema.append(geolocation_me_cinema)
        ab_cinema = loc_geo_cinema[:]
        print(ab_cinema)
        ab_cinema.append(geolocation_me_cinema)
        ab_cinema.sort()
        print(ab_cinema)
        ab_index_cinema = ab_cinema.index(geolocation_me_cinema) - 1 if ab_cinema.index(geolocation_me_cinema) > 0 else 1
        print(ab_index_cinema)
        spend_cinema = (ab_cinema[ab_index_cinema])
        print(spend_cinema)
        await bot.send_location(message.chat.id, spend_cinema[0], spend_cinema[1], reply_markup=help_assistant_street)

        nom = Nominatim(user_agent='user')
        location_address = nom.reverse(spend_cinema)
        await message.answer(f'–ù–∞—Ö–æ–¥–∏—Ç—Å—è: {location_address}')


@dp.message_handler(Text(equals='–ö—É–¥–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –ø–æ–µ—Å—Ç—å ?üçΩ', ignore_case=True))
async def restaurant(message: types.Message):
    for i in all_pizza[1:4]:
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]} \nCc—ã–ª–∫–∞: {i[1]} \n–ù–∞—Ö–æ–¥–∏—Ç—Å—è: {i[2]} '
                             f'\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {i[-1]}')


@dp.message_handler(Text(equals='–ì–¥–µ –∏ –∫–∞–∫–æ–π –∫–æ—Ñ–µ –º–æ–∂–Ω–æ –≤—ã–ø–∏—Ç—å?‚òïÔ∏è', ignore_case=True))
async def coffee(message: types.Message):
    for i in all_coffee[1:4]:
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]} \nCc—ã–ª–∫–∞: {i[1]} \n–ê–¥—Ä–µ—Å: {i[-1]}', reply_markup=types.ReplyKeyboardRemove())
    await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è‚ùó \n–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–µ–π –∫–æ—Ñ–µ–π–Ω–∏ –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ–∑–ª–µ —Ç–µ–±—è'
                         f' \n–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ',
                         reply_markup=me_location)


@dp.message_handler(content_types=["location"])
async def location(message):
    if message.location is not None:
        geolocation_me = (message.location.latitude, message.location.longitude)
        print(geolocation_me)
        me.append(geolocation_me)
        ab = loc_geo[:]
        print(ab)
        ab.append(geolocation_me)
        ab.sort()
        print(ab)
        ab_index = ab.index(geolocation_me) + 1 if ab.index(geolocation_me) > 0 else 0
        print(ab_index)
        spend = (ab[ab_index])
        print(spend)
        await bot.send_location(message.chat.id, spend[0], spend[1], reply_markup=help_assistant_street)

        nom = Nominatim(user_agent='user')
        location_address = nom.reverse(spend)
        await message.answer(f'–ù–∞—Ö–æ–¥–∏—Ç—Å—è: {location_address}')

# @dp.message_handler(Text(equals='–£–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ñ–µ–π–Ω–∏', ignore_case=True))
# async def location(message: types.Message):
#     if message.location is not None:
#         geolocation_me = (message.location.latitude, message.location.longitude)
#
#         for i in l:
#             distance = h3.point_dist(geolocation_me, i, unit='m')  # to get distance in meters
#             metrix = (round(distance))
#             print(f'–î–∏—Å—Ç–∞–Ω—Ü–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞ {metrix} m')
#             metrix_1.append(metrix)
#         await message.answer(min(metrix_1))


    # –ü–æ–¥–∫–ª—é—á–∏—Ç—å –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–¥, –ø–æ—Å–ª–µ –±—É–¥–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∫–∞–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ñ–µ–π–Ω–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {coffee_title[0]} \nCc—ã–ª–∫–∞: {coffee_urls[0]}')
    # await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {coffee_title[1]} \nCc—ã–ª–∫–∞: {coffee_urls[1]}')
    # await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {coffee_title[2]} \nCc—ã–ª–∫–∞: {coffee_urls[2]}')
    # await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {coffee_title[3]} \nCc—ã–ª–∫–∞: {coffee_urls[3]}')

# @dp.message_handler(Text(equals='–ö–∞–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', ignore_case=True))
# async def theatre(message: types.Message):
#     await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {theatre_title[0]} \n{theatre_urls[0]} \n–ê–¥—Ä–µ—Å: {theatre_address[0]}'
#                          f'\n–ù–∞—á–∞–ª–æ:{theatre_time[0]} \nC—Ç–æ–∏–º–æ—Å—Ç—å: {theatre_cash[0]}')
#     await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {theatre_title[1]} \n{theatre_urls[1]} \n–ê–¥—Ä–µ—Å: {theatre_address[1]}'
#                          f'\n–ù–∞—á–∞–ª–æ: {theatre_time[1]} \nC—Ç–æ–∏–º–æ—Å—Ç—å: {theatre_cash[1]}')
#     await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {theatre_title[2]} \n{theatre_urls[2]} \n–ê–¥—Ä–µ—Å: {theatre_address[2]}'
#                          f'\n–ù–∞—á–∞–ª–æ: {theatre_time[2]} \nC—Ç–æ–∏–º–æ—Å—Ç—å: {theatre_cash[2]}')
#     await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {theatre_title[3]} \n{theatre_urls[3]} \n–ê–¥—Ä–µ—Å: {theatre_address[3]}'
#                          f'\n–ù–∞—á–∞–ª–æ: {theatre_time[3]} \nC—Ç–æ–∏–º–æ—Å—Ç—å: {theatre_cash[3]}')

@dp.message_handler()
async def info(message: types.Message):
    global number, count_of_attempts

    try:
        if int(message.text) == number:
            await message.answer(f'–í—ã —É–≥–∞–¥–∞–ª–∏!üéâ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {count_of_attempts}')
            number = random.randint(1, 20)

        elif int(message.text) < number:
            await message.answer(f'–í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ')
            count_of_attempts += 1
            await game(message)

        else:
            await message.answer(f'–í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ')
            count_of_attempts += 1
            await game(message)
    except ValueError:
        await message.answer(f'–û—à–∏–±–∫–∞‚ùó\n–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø')
        await game(message)

        # if g < 10:
        #         youi = [int(g) for i in kinogo_decription if g < 10]
        #         youi_1 = [int(g) for r in kinogo_decription if g < 10]
        #         await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {r} \nCc—ã–ª–∫–∞: {i}\n')
        #         break
        #     else:
        #         g += 1
        #         print(g)
